diff --git a/src/Entity/Server.php b/src/Entity/Server.php
index 1cc5820d..2f2fce51 100644
--- a/src/Entity/Server.php
+++ b/src/Entity/Server.php
@@ -5,6 +5,7 @@ namespace Drupal\search_api\Entity;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Site\Settings;
 use Drupal\search_api\Event\DeterminingServerFeaturesEvent;
 use Drupal\search_api\Event\SearchApiEvents;
 use Drupal\search_api\IndexInterface;
@@ -144,6 +145,9 @@ class Server extends ConfigEntityBase implements ServerInterface {
   public function getBackend() {
     if (!$this->backendPlugin) {
       $backend_plugin_manager = \Drupal::service('plugin.manager.search_api.backend');
+      // call getBackendConfig to override from settings if exists!
+      $this->getBackendConfig();
+
       $config = $this->backend_config;
       $config['#server'] = $this;
       if (!($this->backendPlugin = $backend_plugin_manager->createInstance($this->getBackendId(), $config))) {
@@ -159,6 +163,11 @@ class Server extends ConfigEntityBase implements ServerInterface {
    * {@inheritdoc}
    */
   public function getBackendConfig() {
+    // read configuration from settings
+    $settings = Settings::get($this->backend, []);
+    $settings = isset($settings[$this->id]) ? $settings[$this->id] : [];
+    $this->backend_config["connector_config"] = array_merge($this->backend_config["connector_config"], $settings);
+
     return $this->backend_config;
   }

@@ -170,7 +179,7 @@ class Server extends ConfigEntityBase implements ServerInterface {
     // In case the backend plugin is already loaded, make sure the configuration
     // stays in sync.
     if ($this->backendPlugin
-        && $this->getBackend()->getConfiguration() !== $backend_config) {
+      && $this->getBackend()->getConfiguration() !== $backend_config) {
       $this->getBackend()->setConfiguration($backend_config);
     }
     return $this;
@@ -512,10 +521,10 @@ class Server extends ConfigEntityBase implements ServerInterface {

     // If the server is being disabled, also disable all its indexes.
     if (!$this->isSyncing()
-        && !$this->isInstallingFromExtension()
-        && !isset($overrides['status'])
-        && !$this->status()
-        && $this->original->status()) {
+      && !$this->isInstallingFromExtension()
+      && !isset($overrides['status'])
+      && !$this->status()
+      && $this->original->status()) {
       foreach ($this->getIndexes(['status' => TRUE]) as $index) {
         /** @var \Drupal\search_api\IndexInterface $index */
         $index->setStatus(FALSE)->save();
@@ -615,4 +624,20 @@ class Server extends ConfigEntityBase implements ServerInterface {
     $this->backendPlugin = NULL;
   }
 
+  /**
+   * overriden for config update :)
+   * {@inheritdoc}
+   */
+  public static function load($id) {
+    $entity_type_repository = \Drupal::service('entity_type.repository');
+    $entity_type_manager = \Drupal::entityTypeManager();
+    $storage = $entity_type_manager->getStorage($entity_type_repository->getEntityTypeFromClass(static::class));
+    $server = $storage->load($id);
+
+    // update data from settings if exists
+    $server->setBackendConfig($server->getBackendConfig());
+
+    return $server;
+  }
 }
+
