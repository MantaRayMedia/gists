diff --git a/views_handler_filter_selective.inc b/views_handler_filter_selective.inc
index 18ee394..3b6428f 100644
--- a/views_handler_filter_selective.inc
+++ b/views_handler_filter_selective.inc
@@ -274,7 +274,7 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
       // to return thousands of possible values.
       $max_items = (int) $this->options['selective_items_limit'];
 
-      // Clone the view (so it works while editting) and get all results.
+      // Clone the view (so it works while editing) and get all results.
       $view_copy = $this->view->clone_view();
       if (!$view_copy) {
         return NULL;
@@ -318,7 +318,7 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
         unset($_GET['page']);
       }
 
-      // Manipulate display + default: don't know if fields are overriden.
+      // Manipulate display + default: don't know if fields are overridden.
       $display = $view_copy->display[$this->view->current_display];
       $display_default = $view_copy->display['default'];
 
@@ -427,15 +427,26 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
 
       // Make sure we are not using a pager to prevent unnecessary count(*)
       // queries.
-      $display->display_options['pager'] = unserialize('a:2:{s:4:"type";s:4:"none";s:7:"options";a:1:{s:6:"offset";s:1:"0";}}');
-      $display_default->display_options['pager'] = unserialize('a:2:{s:4:"type";s:4:"none";s:7:"options";a:1:{s:6:"offset";s:1:"0";}}');
+      $pager = array(
+        'type' => 'none',
+        'options' => array(
+          'offset' => 0
+        )
+      );
+      $display->display_options['pager'] = $pager;
+      $display_default->display_options['pager'] = $pager;
 
       // Some style plugins can affect the built query, make sure
       // we use a reliable field based style plugin.
       $display->display_options['style_plugin'] = 'default';
-      $display->display_options['style_options'] = unserialize('a:4:{s:9:"row_class";s:0:"";s:17:"default_row_class";i:1;s:17:"row_class_special";i:1;s:11:"uses_fields";i:0;}');
+      $display->display_options['style_options'] = array(
+        'row_class' => '0',
+        'default_row_class' => 1,
+        'row_class_special' => 1,
+        'uses_fields' => 0,
+      );
       $display->display_options['row_plugin'] = 'fields';
-      $display->display_options['row_options'] = unserialize('s:6:"fields";');
+      $display->display_options['row_options'] = 'fields';
 
       // Run View.
       $view_copy->execute($this->view->current_display);
@@ -462,16 +473,138 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
       // views_plugin_query_default::add_field() truncates aliases to 60
       // characters.
       $field_alias = substr($field_alias_original, 0, 60);
+
+      /** checking for search API */
+      $entity_type = NULL;
+      $search_api_view = (strpos($this->view->base_table, 'search_api_index_') === 0);
+      if ($search_api_view) {
+        /** offset for length of search_api_index_ */
+        $search_index = search_api_index_load(substr($this->view->base_table, 17));
+        $entity_type = $search_index->getEntityType();
+
+        $retrieved_ids = [];
+        $group_counter = [];
+
+        $field_type = $search_index->getFields()[$display_field_id]['type'];
+        $field_entity_type = $search_index->getFields()[$display_field_id]['entity_type'] ?? null;
+//        var_dump($display_field_id, $field_type);
+      }
+
       foreach ($view_copy->result as $index => $row) {
+
         // $key = $display_field_handler->get_value($row) should be more robust
         // but values are sometimes nested arrays, and we need scalar values
         // for the filters.
         $key = $display_field_handler->get_value($row);
-        if (!is_scalar($key)) {
-          $key = $row->{$field_alias};
+
+        /**
+         * @TODO: when new type of data is returned from search_api, add into switch below
+         * @TODO: add new field_type
+         *
+         * supported types: taxonomy_term, date, string
+         *
+         * handle search API view
+         */
+        if ($search_api_view) {
+          if (!empty($row->_entity_properties['search_api_id'])) {
+
+            $entity_array = entity_load($entity_type, [$row->_entity_properties['search_api_id']]);
+            if (!empty($entity_array)) {
+              $entity = reset($entity_array);
+              $constructor = $entity->{$display_field_id};
+
+              if (isset($constructor) && !empty($constructor)) {
+                switch ($field_entity_type) {
+                  case 'taxonomy_term':
+                    if (isset($constructor[LANGUAGE_NONE][0]['tid'])) {
+
+                      /**
+                       * handle multiple taxonomy entries
+                       */
+                      foreach ($constructor[LANGUAGE_NONE] as $singleEntry) {
+
+                        $field_value = $singleEntry['tid'];
+
+                        // add only if not already showing
+                        if (!in_array($field_value, $retrieved_ids)) {
+                          $retrieved_ids[] = $field_value;
+                        }
+
+                        if ($field_entity_type) {
+                          $field_entity_array = entity_load($field_entity_type, [$field_value]);
+                          if (!empty($field_entity_array)) {
+                            $field_entity = reset($field_entity_array);
+                          }
+
+                          $render_field_name = $display_field_id;
+                          if ($field_entity_type === 'taxonomy_term') {
+                            $render_field_name = 'name_field';
+                          }
+
+                          $field_view = field_view_field($field_entity_type, $field_entity, $render_field_name, ['label' => 'hidden']);
+                          $ids = entity_extract_ids($field_entity_type, $field_entity);
+
+                          $key = $ids[0];
+                          $value = strip_tags(render($field_view));
+                        } else {
+                          $key = $field_value;
+                          $value = $field_value;
+                        }
+
+                        $key_value = empty($key) ? json_encode($key) : $key;
+                        $oids[$key] = empty($value) ? t('Empty (@key)', array('@key' => $key_value)) : $value;
+
+                        // add to counter for display
+                        $this->addToCountGroup($group_counter, $key);
+                      }
+                    }
+                    break;
+                  default:
+                    $field_value = $constructor[LANGUAGE_NONE][0]['value'];
+
+                    // add only if not already showing
+                    if (!in_array($field_value, $retrieved_ids)) {
+                      $retrieved_ids[] = $field_value;
+                    }
+//                    var_dump($field_type, $field_value);die;
+
+                    switch ($field_type) {
+                      case "date":
+                        $newDate = new \DateTime($field_value);
+                        $key = $field_value;
+                        $dateMapping = [
+                          'yyyy' => 'Y'
+                        ];
+                        $value = $newDate->format($dateMapping[$display_field['settings']['format_type']]);
+                        break;
+
+                      default:
+                        $key = $field_value;
+                        $value = $field_value;
+                    }
+//                    var_dump($value);die;
+
+                    $key_value = empty($key) ? json_encode($key) : $key;
+                    $oids[$key] = empty($value) ? t('Empty (@key)', array('@key' => $key_value)) : $value;
+
+                    // add to counter for display
+                    $this->addToCountGroup($group_counter, $key);
+                  }
+              }
+            }
+          }
+
+        } else {
+          if (!is_scalar($key)) {
+            $key = $row->{$field_alias};
+          }
+
+          $value = strip_tags($view_copy->render_field($display_field_id, $index));
+
+          $key_value = empty($key) ? json_encode($key) : $key;
+          $oids[$key] = empty($value) ? t('Empty (@key)', array('@key' => $key_value)) : $value;
         }
-        $value = strip_tags($view_copy->render_field($display_field_id, $index));
-        $oids[$key] = empty($value) ? t('Empty (@key)', array('@key' => empty($key) ? json_encode($key) : $key)) : $value;
+
       }
 
       // Sort values.
@@ -505,6 +638,10 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
       }
       drupal_alter('views_filters_selective_sort', $oids, $this);
 
+      if ($search_api_view && $group_counter) {
+        $this->addCounterToForSearchApiResults($oids, $group_counter);
+      }
+
       // If limit exceeded this field is not good for being "selective".
       if (!empty($max_items) && count($oids) == $max_items) {
         drupal_set_message(t('Selective filter "@field" has limited the amount of total results. Please, review you query configuration.', array('@field' => $ui_name)), 'warning');
@@ -514,6 +651,7 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
       $view_copy->destroy();
     }
 
+//    var_dump($oids);die;
     return self::$results[$signature];
   }
 
@@ -576,4 +714,88 @@ class views_handler_filter_selective extends views_handler_filter_in_operator {
     return $this->originalOptions;
   }
 
+  /**
+   * New search_api Query condition constructor
+   */
+  public function op_simple()
+  {
+    if (strpos($this->view->base_table, 'search_api_index_') === 0) {
+
+      if ($this->operator === 'empty') {
+        $this->query->condition($this->real_field, NULL, '=', $this->options['group']);
+        return;
+      }
+
+      if ($this->operator === 'not empty') {
+        $this->query->condition($this->real_field, NULL, '<>', $this->options['group']);
+        return;
+      }
+
+      while (is_array($this->value) && count($this->value) === 1) {
+        $this->value = reset($this->value);
+      }
+
+      $operator = '=';
+      $conjunction = 'AND';
+      if ($this->operator === '=') {
+        $conjunction = 'OR';
+      } elseif ($this->operator === '<>') {
+        $operator = '<>';
+      }
+
+      if (is_array($this->value) && empty($this->value)) {
+        if ($operator != '<>') {
+          $this->query->condition($this->real_field, NULL, '=', $this->options['group']);
+        }
+        return;
+      }
+
+      if (is_scalar($this->value) && $this->value !== '') {
+        $this->query->condition($this->real_field, $this->value, $operator, $this->options['group']);
+        return;
+      }
+
+      if ($this->value) {
+        $filter = $this->query->createFilter($conjunction);
+        if ($filter) {
+          foreach ($this->value as $v) {
+            $filter->condition($this->real_field, $v, $operator);
+          }
+
+          $this->query->filter($filter, $this->options['group']);
+        }
+      }
+    } else {
+      parent::op_simple();
+    }
+  }
+
+  /**
+   * Appends ($count) to value
+   *
+   * @param $results
+   * @param $group_counter
+   */
+  private function addCounterToForSearchApiResults(&$results, $group_counter)
+  {
+    foreach ($group_counter as $id => $count) {
+      $results[$id] .=' ('.(int)$count.')';
+    }
+  }
+
+  /**
+   * increasing the count for specific key / id
+   *
+   * @param $group_counter
+   * @param $key
+   */
+  private function addToCountGroup(&$group_counter, $key)
+  {
+    if (array_key_exists($key, $group_counter)) {
+      $group_counter[$key]++;
+    } else {
+      $group_counter[$key] = 1;
+    }
+  }
 }
+
