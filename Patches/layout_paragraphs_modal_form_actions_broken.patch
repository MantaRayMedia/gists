diff --git a/js/builder.es6.js b/js/builder.es6.js
index 4d003ef..a1c7d49 100644
--- a/js/builder.es6.js
+++ b/js/builder.es6.js
@@ -81,7 +81,7 @@
         // Fail silently to prevent console errors.
       }
     })
-    .execute();
+      .execute();
   }
   const reorderComponents = debounce(doReorderComponents);
   /**
@@ -224,7 +224,7 @@
         null,
         $item.next().length ? $item.next()[0] : null,
       ).length > 0
-    ) {
+      ) {
       pos += dir;
     }
     if (targets[pos + dir] !== undefined) {
@@ -481,6 +481,7 @@
             drake.containers.push(c);
           });
       });
+      updateDialogButtons();
     },
   };
   // Move the main form action buttons into the jQuery modal button pane.
@@ -490,41 +491,55 @@
   // main form action buttons into the jQuery button pane.
   // @see https://www.drupal.org/project/layout_paragraphs/issues/3191418
   // @see https://www.drupal.org/project/layout_paragraphs/issues/3216981
+  let $lpDialog;
   $(window).on('dialog:aftercreate', (event, dialog, $dialog) => {
     if ($dialog.attr('id').indexOf('lpb-dialog-') === 0) {
-      // If buttons have already been added to the buttonpane, do not continue.
-      if ($dialog.dialog('option', 'buttons').length > 0) {
-        return;
-      }
-      const buttons = [];
-      const $buttons = $dialog.find(
-        '.layout-paragraphs-component-form > .form-actions input[type=submit], .layout-paragraphs-component-form > .form-actions a.button',
-      );
-      $buttons.each((_i, el) => {
-        const $originalButton = $(el).css({ display: 'none' });
-        buttons.push({
-          text: $originalButton.html() || $originalButton.attr('value'),
-          class: $originalButton.attr('class'),
-          click(e) {
-            // If the original button is an anchor tag, triggering the "click"
-            // event will not simulate a click. Use the click method instead.
-            if ($originalButton.is('a')) {
-              $originalButton[0].click();
-            } else {
-              $originalButton
-                .trigger('mousedown')
-                .trigger('mouseup')
-                .trigger('click');
-              e.preventDefault();
-            }
-          },
-        });
-      });
-      if (buttons.length) {
-        $dialog.dialog('option', 'buttons', buttons);
-      }
+      $lpDialog = $dialog;
+      updateDialogButtons();
+    }
+  });
+  $(window).on('dialog:afterclose', (event, dialog, $dialog) => {
+    if ($lpDialog && $dialog[0] === $lpDialog[0]) {
+      $lpDialog = undefined;
     }
   });
+  function updateDialogButtons() {
+    if (!$lpDialog) {
+      return;
+    }
+
+    const buttons = [];
+    const $buttons = $lpDialog.find(
+      '.layout-paragraphs-component-form > .form-actions input[type=submit], .layout-paragraphs-component-form > .form-actions a.button',
+    );
+
+    if ($buttons.length == 0) {
+      return;
+    }
+
+    $buttons.each((_i, el) => {
+      const $originalButton = $(el).css({ display: 'none' });
+      buttons.push({
+        text: $originalButton.html() || $originalButton.attr('value'),
+        class: $originalButton.attr('class'),
+        click(e) {
+          // If the original button is an anchor tag, triggering the "click"
+          // event will not simulate a click. Use the click method instead.
+          if ($originalButton.is('a')) {
+            $originalButton[0].click();
+          } else {
+            $originalButton
+              .trigger('mousedown')
+              .trigger('mouseup')
+              .trigger('click');
+            e.preventDefault();
+          }
+        },
+      });
+    });
+
+    $lpDialog.dialog('option', 'buttons', buttons);
+  }
   // Repositions open dialogs.
   // @see https://www.drupal.org/project/layout_paragraphs/issues/3252978
   // @see https://stackoverflow.com/questions/5456298/refresh-jquery-ui-dialog-position
diff --git a/js/builder.js b/js/builder.js
index 8f86413..e3142c8 100644
--- a/js/builder.js
+++ b/js/builder.js
@@ -1,9 +1,9 @@
 /**
-* DO NOT EDIT THIS FILE.
-* See the following change record for more information,
-* https://www.drupal.org/node/2815083
-* @preserve
-**/
+ * DO NOT EDIT THIS FILE.
+ * See the following change record for more information,
+ * https://www.drupal.org/node/2815083
+ * @preserve
+ **/
 function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
 function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
 function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
@@ -325,37 +325,53 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
           drake.containers.push(c);
         });
       });
+      updateDialogButtons();
     }
   };
+  var $lpDialog;
   $(window).on('dialog:aftercreate', function (event, dialog, $dialog) {
     if ($dialog.attr('id').indexOf('lpb-dialog-') === 0) {
-      if ($dialog.dialog('option', 'buttons').length > 0) {
-        return;
-      }
-      var buttons = [];
-      var $buttons = $dialog.find('.layout-paragraphs-component-form > .form-actions input[type=submit], .layout-paragraphs-component-form > .form-actions a.button');
-      $buttons.each(function (_i, el) {
-        var $originalButton = $(el).css({
-          display: 'none'
-        });
-        buttons.push({
-          text: $originalButton.html() || $originalButton.attr('value'),
-          class: $originalButton.attr('class'),
-          click: function click(e) {
-            if ($originalButton.is('a')) {
-              $originalButton[0].click();
-            } else {
-              $originalButton.trigger('mousedown').trigger('mouseup').trigger('click');
-              e.preventDefault();
-            }
-          }
-        });
-      });
-      if (buttons.length) {
-        $dialog.dialog('option', 'buttons', buttons);
-      }
+      $lpDialog = $dialog;
+      updateDialogButtons();
+    }
+  });
+  $(window).on('dialog:afterclose', function (event, dialog, $dialog) {
+    if ($lpDialog && $dialog[0] === $lpDialog[0]) {
+      $lpDialog = undefined;
     }
   });
+  function updateDialogButtons() {
+    if (!$lpDialog) {
+      return;
+    }
+
+    var buttons = [];
+    var $buttons = $lpDialog.find('.layout-paragraphs-component-form > .form-actions input[type=submit], .layout-paragraphs-component-form > .form-actions a.button');
+
+    if ($buttons.length == 0) {
+      return;
+    }
+
+    $buttons.each(function (_i, el) {
+      var $originalButton = $(el).css({
+        display: 'none'
+      });
+      buttons.push({
+        text: $originalButton.html() || $originalButton.attr('value'),
+        class: $originalButton.attr('class'),
+        click: function click(e) {
+          if ($originalButton.is('a')) {
+            $originalButton[0].click();
+          } else {
+            $originalButton.trigger('mousedown').trigger('mouseup').trigger('click');
+            e.preventDefault();
+          }
+        }
+      });
+    });
+
+    $lpDialog.dialog('option', 'buttons', buttons);
+  }
   var lpDialogInterval;
   $(window).on('dialog:aftercreate', function (event, dialog, $dialog) {
     if ($dialog[0].id.indexOf('lpb-dialog-') === 0) {
@@ -363,4 +379,4 @@ function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
       lpDialogInterval = setInterval(repositionDialog.bind(null, lpDialogInterval), 500);
     }
   });
-})(jQuery, Drupal, Drupal.debounce, dragula, once);
\ No newline at end of file
+})(jQuery, Drupal, Drupal.debounce, dragula, once);
